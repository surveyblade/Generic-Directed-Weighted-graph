<!DOCTYPE html>
<!-- saved from url=(0066)https://cgi.cse.unsw.edu.au/~cs6771/19T2/assignments/dg/index.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>

COMP6771 - Advanced C++ Programming - 19T2

</title>
<link href="./Generic Directed Weighted graph (GDWG)_files/bootstrap.min.css" rel="stylesheet">
<link href="./Generic Directed Weighted graph (GDWG)_files/course.css" rel="stylesheet">
<script type="text/javascript" src="./Generic Directed Weighted graph (GDWG)_files/jquery.min.js"></script>
<script type="text/javascript" src="./Generic Directed Weighted graph (GDWG)_files/bootstrap.min.js"></script>
</head>
<body data-gr-c-s-loaded="true">



<div class="container">

<div id="heading">

<a class="heading_link" target="_blank" id="left_heading_link" href="https://webcms3.cse.unsw.edu.au/COMP6771/19T2">COMP6771 19T2</a>



COMP6771 - Advanced C++ Programming - 19T2



<a class="heading_link" target="_blank" id="right_heading_link" href="https://webcms3.cse.unsw.edu.au/COMP6771/19T2">Advanced C++ Programming</a>

</div>


<style type="text/css">
table td, table th { padding: 3px; }
</style>
<div class="container" style="width: 100%;">
<div class="page-header">
<h1>Assignment 3 - Generic Directed Weighted graph (GDWG)</h1>
</div>


<h3>Change Log</h3>
<ul>
  <li>17/07: erase(const N&amp; n) changed to DeleteNode(const N&amp; n)</li>
  <li>17/07: GetNodes() and GetConnected() added</li>
  <li>18/07: GetConnected() now says sorted by nodes (instead of edge - which made less sense)</li>
  <li>20/07: References to graph_const_iterator and non-const iterators removed</li>
  <li>20/07: rbegin and rend shouldn't return const_iterators - they should return const_reverse_iterators</li>
  <li>23/07: GetConnected clear that is only for outgoing nodes</li>
  <li>27/07: operator&lt;&lt; schematic output commas removed to match example</li>
  <li>27/07: rbegin() and rend() more clearly return const_reverse_iterator</li>
  <li>27/07: fixed operator&lt;&lt; example for outbound edges from node 3</li>
  <li>28/07: Removed reverse to iterator invalidation in erase function</li>
  <li>29/07: Spacing between now and open paranthesis clarified in operator&lt;&lt;</li>
  <li>30/07: GetWeights direction clarified</li>
  <li>31/07: Clarification: If there are multiple edges between node A and node B, then the result of GetConnected() of A will only have one node B in it's vector array</li>
  <li>31/07: Clarification: Example data struture updated from set to map</li>
  <li>31/07: Clarification: GetConnected() on a src node only returns the nodes connecting to it via src's OUTGOING edges</li>
  <li>01/08: Clarification: crend() now has a correct return type of const_reverse_iterator</li>
  <li>02/08: Clarification: erase(N, N, E) now states that if the edge isn't present it returns false.</li>
  <li>02/08: In section 3.5 (Edge Iterator) the type has been updated from <b>gdwg::Graph&lt;N, E&gt;::const_iterator</b> to <b>gdwg::Graph&lt;N, E&gt;::const_iterator</b></li>
  <li>02/08: Phrase "If an exception is not thrown" added to bool Replace function</li>
  <li>03/08: Find now says "Returns an iterator to the found edge" instead of "Returns an iterator to the found node"</li>
  <li>04/08: Explanation about how an edge iterator would print out N N E error fixed</li>

</ul>

<h2>1. Overview</h2>

<p>Write a "Graph" Class Library in C++, with
its interface given in <code>graph.h</code>
and its implementation in <code>graph.tpp</code>.
</p>

<h3>1.1. Aims</h3>
<ul>
  <li>Smart Pointers</li>
  <li>Exception Handling</li>
  <li>Lambda Functions</li>
  <li>Custom Iterators</li>
  <li>Function and Class templates</li>
  <li>Operator Overloading</li>
  <li>Friends</li>
  <li>Namespaces</li>
</ul>

<h3>1.2. Description</h3>

<p>In this assignment, you will write a Generic Directed Weighted
graph (GDWG) with value-like semantics 
in C++. Both the data stored at a node
and the weight stored at
an edge will be of generic types. Both generic types
may be different.
For example, here is a graph with nodes storing std::string and edges weighted by int:
</p>
<pre>gdwg::Graph&lt;std::string,int&gt; g;</pre>
<p>Formally, this directed weighted graph G=(N,E) will consist of
a set of nodes N and a set of weighted edges E. Give a node, 
an edge directed into it is called an <i>incoming edge</i> and
an edge directed out of it is called an <i>outgoing edge</i>. The
<i>in-degree</i> of a node is the number of its incoming edges.
Similarly, the
<i>out-degree</i> of a node is the number of its outgoing edges.
Given a directed edge from src to dst, src → dst, src is the <i>source</i> node
and dst is known as the <i>destination</i> node. G is a multi-edged
graph, as there may be two edges from the same source node to the
same destination node with two different weights. However,
all nodes are distinct, as they contain different data values.

</p><p>All nodes in the graph are unique.</p>

<p>Between any two nodes (or a node and itself), all edges must be unique</p>

<h2>2. Your task</h2>

<h3>2.1 Constructors &amp; Destructors</h3>

<table border="1" cellspacing="0" cellpadding="5">
  <tbody><tr>
    <td>Name</td>
    <td>Constructor</td>
    <td>Description and Hints</td>
    <td>Examples</td>
    <th>Exception: Why thrown &amp; what message</th>
  </tr>
  <tr>
    <td>Default Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;</pre></td>
    <td>The default constructor for a graph.</td>
<td><pre>gdwg::Graph&lt;N, E&gt; a;
</pre>
</td>
<td>N/A</td>
</tr>


  <tr>
    <td>Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;(
  std::vector&lt;N&gt;::const_iterator,
  std::vector&lt;N&gt;::const_iterator
)</pre></td>
    <td>Takes the start and end of a const_iterator to a std:vector&lt;N&gt; and adds those nodes to the graph.</td>
    <td><pre>  std::vector&lt;std::string&gt; v{"Hello", "how", "are", "you"};
  gdwg::Graph&lt;std::string, double&gt; b{v.begin(),v.end()};
</pre></td>
<td>N/A</td>
</tr>

  <tr>
    <td>Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;(
  std::vector&lt;std::tuple&lt;N, N, E&gt;&gt;::const_iterator,
  std::vector&lt;std::tuple&lt;N, N, E&gt;&gt;::const_iterator
)</pre></td>

    <td>Iterators over tuples of (source node, destination node, edge weight) and adds them to the graph. You are responsible for creating nodes if they don't exist as you iterate through.</td>
    <td><pre>std::string s1{"Hello"};
std::string s2{"how"};
std::string s3{"are"};
auto e1 = std::make_tuple(s1, s2, 5.4);
auto e2 = std::make_tuple(s2, s3, 7.6);
auto e = std::vector&lt;std::tuple&lt;std::string, std::string, double&gt;&gt;{e1, e2};
gdwg::Graph&lt;std::string, double&gt; b{e.begin(), e.end()};
</pre></td>
<td>N/A</td>
</tr>

  <tr>
    <td>Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;(std::initializer_list&lt;N&gt;)</pre></td>
    <td>A constructor that takes an initialiser list of Nodes to populate the graph.</td>
    <td><pre>gdwg::Graph&lt;char, std::string&gt; b{'a', 'b', 'x', 'y'};
</pre></td>
<td>N/A</td>
</tr>
 
  <tr>
    <td>Copy Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;(const gdwg::Graph&lt;N, E&gt;&amp;)</pre></td>
    <td></td>
    <td><pre>gdwg::Graph&lt;std::string, int&gt;
gdwg::Graph&lt;std::string, int&gt; aCopy{a};</pre></td>
    <td>N/A</td>
  </tr>
  <tr>
    <td>Move Constructor</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;(gdwg::Graph&lt;N, E&gt;&amp;&amp;)</pre></td>
    <td></td>
    <td><pre>gdwg::Graph&lt;std::string, int&gt; a;
gdwg::Graph&lt;std::string, int&gt; aMove{std::move(a)};</pre></td>
    <td>N/A</td>
  </tr>
  <tr>
    <td>Destructor</td>
    <td><pre>~gdwg::Graph&lt;N, E&gt;()</pre></td>
    <td></td>
    <td>N/A</td>
    <td>N/A</td>
  </tr>
</tbody></table>


<h3>2.2. Operations</h3>

<table border="1" cellspacing="0" cellpadding="5">
  <tbody><tr>
    <td>Name</td>
    <th>Operator</th>
    <td>Description</td>
    <td>Examples</td>
    <th>Exception: Why thrown &amp; what message</th>
  </tr>
  <tr>
    <td>Copy Assignment</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;&amp; operator=(const gdwg::Graph&lt;N, E&gt;&amp;)</pre></td>
    <td>A copy assignment operator overload</td>
    <td><pre>a = b;</pre></td>
    <td>
      N/A
    </td>
  </tr>
  <tr>
    <td>Move Assignment</td>
    <td><pre>gdwg::Graph&lt;N, E&gt;&amp; operator=(gdwg::Graph&lt;N, E&gt;&amp;&amp;)</pre></td>
    <td>A move assignment operator</td>
    <td><pre>a = std::move(b);</pre></td>
    <td>
      N/A
    </td>
  </tr>
</tbody></table>

<h3>2.3. Methods</h3>

<table border="1" cellspacing="0" cellpadding="5">
  <tbody><tr>
    <th>Prototype</th>
    <th>Description</th>
    <th>Usage</th>
    <th>Exception: Why thrown &amp; what message</th>
  </tr>

  <tr>
    <td><pre>bool InsertNode(const N&amp; val)</pre></td>
    <td>Adds a new node with value val to the graph. This function returns true if the node is added to the graph and false if there is already a node containing val in the graph (with the graph unchanged). </td>
    <td><pre>std::string s{"a"};
g.InsertNode(s);</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>bool InsertEdge(const N&amp; src, const N&amp; dst, const E&amp; w)</pre></td>
    <td>Adds a new edge src → dst with weight w. This function returns true if the edge is added and false if the edge src → dst with weight w already exists in the graph. Note: Nodes are allowed to be connected to themselves.</td>
    <td><pre>std::string u{"c"};
g.InsertEdge("a",u,1);</pre></td>
    <td>
      <ul>
        <li><b>Condition</b>: If either src or dst not cannot be found in the graph</li>
        <li><b>Throw</b>: std::runtime_error</li>
        <li><b>With string</b>: "Cannot call Graph::InsertEdge when either src or dst node does not exist"</li>
      </ul>
  </td></tr>

  <tr>
    <td><pre>bool DeleteNode(const N&amp;)</pre></td>
    <td>Deletes a given node and all its associated incoming and outgoing edges. This function does nothing if the node that is to be deleted does not exist in the graph. Hint: if you are using weak ptrs for edges you may be able to do this quite simply. This function returns an boolean as to whether the item has been removed or not (true if removed).</td>
    <td><pre>g.DeleteNode("b")</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>bool Replace(const N&amp; oldData, const N&amp; newData)</pre></td>
    <td>Replaces the original data, oldData, stored at this particular node by the replacement data, newData. If an exception is not thrown, this function returns false if a node that contains value newData already exists in the graph (with the graph unchanged) and true otherwise.</td>
    <td><pre>g.Replace("a", "e")</pre></td>
    <td>
      <ul>
        <li><b>Condition</b>: If no node that contains value oldData can be found</li>
        <li><b>Throw</b>: std::runtime_error</li>
        <li><b>With string</b>: "Cannot call Graph::Replace on a node that doesn't exist"</li>
      </ul>
    </td>
  </tr>

  <tr>
    <td><pre>void MergeReplace(const N&amp; oldData, const N&amp; newData)</pre></td>
    <td>All instances of node oldData in the graph are replaced with instances of newData. After completing, every incoming and outgoing edge of oldData becomes an incoming/ougoing edge of newData, except that duplicate edges must be removed. Examples at the bottom of the table.
    </td>
    <td><pre>g.MergeReplace("c", "e")</pre></td>
    <td>
      <ul>
        <li><b>Condition</b>: If either node cannot be found in the graph</li>
        <li><b>Throw</b>: std::runtime_error</li>
        <li><b>With string</b>: "Cannot call Graph::MergeReplace on old or new data if they don't exist in the graph"</li>
      </ul>
    </td>
  </tr>

  <tr>
    <td><pre>void Clear()</pre></td>
    <td>Remove all nodes and edges from the graph. New nodes or edges can be added to the graph afterwards.</td>
    <td><pre>g.Clear()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>bool IsNode(const N&amp; val);</pre></td>
    <td>Returns true if a node with value val exists in the graph and false otherwise.</td>
    <td><pre>g.IsNode("a")</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>bool IsConnected(const N&amp; src, const N&amp; dst);</pre></td>
    <td>Returns true if the edge src → dst exists in the graph and false otherwise.</td>
    <td><pre>g.IsConnected("e","b")</pre></td>
    <td>
      <ul>
        <li><b>Condition</b>: If either src or dst is not in the graph</li>
        <li><b>Throw</b>: std::runtime_error</li>
        <li><b>With string</b>: "Cannot call Graph::IsConnected if src or dst node don't exist in the graph"</li>
      </ul>
    </td>
  </tr>

  <tr>
    <td><pre>std::vector&lt;N&gt; GetNodes()</pre></td>
    <td>Returns a vector of all nodes in the graph. Sorted by increasing order of node.</td>
    <td><pre>g.GetNodes()</pre></td>
    <td>N/A
    </td>
  </tr>

  <tr>
    <td><pre>std::vector&lt;N&gt; GetConnected(const N&amp; src)</pre></td>
    <td>Returns a vector of the nodes (found from any immediate outgoing edge) connected to the src node passed in. Sorted by increasing order of node (of those nodes that are connected).</td>
    <td><pre>g.GetConnected("e")</pre></td>
    <td>
    <ul>
        <li><b>Condition</b>: If src is not in the graph</li>
        <li><b>Throw</b>: std::out_of_range</li>
        <li><b>With string</b>: "Cannot call Graph::GetConnected if src doesn't exist in the graph"</li>
      </ul>
    </td>
  </tr>

  <tr>
    <td><pre>std::vector&lt;E&gt; GetWeights(const N&amp; src, const N&amp; dst)</pre></td>
    <td>Returns a vector of the weights of edges between two nodes. Sorted by increasing order of edge. These edges are all outgoing edges of src toward dst.</td>
    <td><pre>g.GetWeights("e","b")</pre></td>
    <td>
    <ul>
        <li><b>Condition</b>: If either src or dst is not in the graph</li>
        <li><b>Throw</b>: std::out_of_range</li>
        <li><b>With string</b>: "Cannot call Graph::GetWeights if src or dst node don't exist in the graph"</li>
      </ul>
    </td>
  </tr>

  <tr>
    <td><pre>const_iterator find(const N&amp;, const N&amp;, const E&amp;);</pre></td>
    <td>Returns an iterator to the found edge in the graph. If the edge is not found the equivalent value of gdwg::Graph&lt;N, E&gt;::cend() is returned.</td>
    <td><pre>gwdg::Graph&lt;std::string, int&gt; g;
std::string a1{"e"};
std::string a2{"i"};
int e = 8;
auto it = g.find(a1, a2, e)</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>bool erase(const N&amp; src, const N&amp; dst, const E&amp; w)</pre></td>
    <td>Deletes an edge from src to dst with weight w, only if the edge exists in the graph. This function returns an boolean as to whether the item has been removed or not (true if removed). If the edge is not in the graph it returns false.</td>
    <td><pre>g.erase("b", "c", 1)</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_iterator erase(const_iterator it);</pre></td>
    <td>This function removes the position at the location the iterator points to. This function returns an iterator to the element AFTER the one that has been removed. If no erase can be made, the equivalent of gdwg::Graph&lt;N, E&gt;::end() is returned.</td>
    <td><pre>gwdg::Graph&lt;std::string, int&gt; g;
auto it = g.find("e", "i", 8);
if (it != g.end()) {
  g.erase(it);
}</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_iterator cbegin();</pre></td>
    <td>Returns a const_iterator pointing to the first in the container. A const_iterator is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), but it cannot be used to modify the contents it points to, even if the content it points to is not itself const.</td>
    <td><pre>auto it = g.cbegin()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_iterator cend();</pre></td>
    <td>Returns a const_iterator pointing to the past-the-end element in the container. A const_iterator is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), but it cannot be used to modify the contents it points to, even if the content it points to is not itself const. If the container is empty, this function returns the same as vector::cbegin. The value returned shall not be dereferenced.</td>
    <td><pre>auto it = g.cend()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_reverse_iterator crbegin();</pre></td>
    <td>Returns a const_reverse_iterator pointing to the last element in the container. A const_reverse_iterator is a reverse iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), but it cannot be used to modify the contents it points to, even if the content it points to is not itself const.</td>
    <td><pre>auto it = g.crbegin()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_reverse_iterator crend();</pre></td>
    <td>Returns a const_reverse_iterator pointing to the before-the-first element in the container. A const_reverse_iterator is a reverse iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), but it cannot be used to modify the contents it points to, even if the content it points to is not itself const. If the container is empty, this function returns the same as vector::crbegin. The value returned shall not be dereferenced.</td>
    <td><pre>auto it = g.crend()</pre></td>
    <td>N/A</td>


  </tr><tr>
    <td><pre>const_iterator begin();</pre></td>
    <td>Exactly the same as cbegin()</td>
    <td><pre>auto it = g.begin()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_iterator end();</pre></td>
    <td>Exactly the same as cend()</td>
    <td><pre>auto it = g.end()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_reverse_iterator rbegin();</pre></td>
    <td>Exactly the same as crbegin()</td>
    <td><pre>auto it = g.rbegin()</pre></td>
    <td>N/A</td>
  </tr>

  <tr>
    <td><pre>const_reverse_iterator rend();</pre></td>
    <td>Exactly the same as crend()</td>
    <td><pre>auto it = g.rend()</pre></td>
    <td>N/A</td>
  </tr>

</tbody></table>

<h4>MergeReplace examples</h4>

<p>Format is (N_src, N_dst, E)</p>

<h5>Example 1 - basic</h5>
<ul>
<li>Operation: MergeReplace(A, B)</li>
<li>Graph before: (A, B, 1), (A, C, 2), (A, D, 3)</li>
<li>Graph after : (B, B, 1), (B, C, 2), (B, D, 3)</li>
</ul>

<h5>Example 2 - duplicate edge removed</h5>
<ul>
<li>Operation: MergeReplace(A, B)</li>
<li>Graph before: (A, B, 1), (A, C, 2), (A, D, 3), (B, B, 1)</li>
<li>Graph after : (B, B, 1), (B, C, 2), (B, D, 3)</li>
</ul>

<h5>Example 3 - Diagramatic</h5>
<img src="./Generic Directed Weighted graph (GDWG)_files/gCDHqrD.png">

<h3>2.4. Friends</h3>

In addition to the operations indicated earlier, the following operations should be supported as friend functions.
Note that these friend operations don't modify any of the given operands.

<table border="1" cellspacing="0" cellpadding="5">
  <tbody><tr>
    <th>Name</th>
    <th>Operator</th>
    <th>Description</th>
    <th>Usage</th>
    <th>Exception: Why thrown &amp; what message</th>
  </tr><tr>
    <td>Equal</td>
    <td><pre>bool operator==(const gdwg::Graph&lt;N, E&gt;&amp;, const gdwg::Graph&lt;N, E&gt;&amp;)</pre></td>
    <td>True if the two graphs contain the same nodes and edges.</td>
    <td><pre>a == b;</pre></td>
    <td>N/A</td>
  </tr>
  <tr>
    <td>Not Equal</td>
    <td><pre>bool operator!=(const gdwg::Graph&lt;N, E&gt;&amp;, const gdwg::Graph&lt;N, E&gt;&amp;)</pre></td>
    <td>True if the two graphs do not contain the same nodes or edges.</td>
    <td><pre>a != b;</pre></td>
    <td>N/A</td>
  </tr>
  <tr>
    <td>Output Stream</td>
    <td><pre>std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const gdwg::Graph&lt;N, E&gt;&amp;)</pre></td>
    <td>Prints out the graph in the following format:
<pre>[node1][1 space](
[2 spaces][node1_connected_node1][1 space][pipe][1 space][weight]
[2 spaces][node1_connected_node2][1 space][pipe][1 space][weight]
[etc etc]
)
[node2][1 space](
[2 spaces][node2_connected_node1][1 space][pipe][1 space][weight]
[2 spaces][node2_connected_node2][1 space][pipe][1 space][weight]
[etc etc]
)
[node3][1 space](
[2 spaces][node3_connected_node1][1 space][pipe][1 space][weight]
[2 spaces][node3_connected_node2][1 space][pipe][1 space][weight]
[etc etc]
)
[etc etc]</pre>
<hr>
For example, for gdwg::Graph&lt;int, int&gt;, an output may be:
<img src="./Generic Directed Weighted graph (GDWG)_files/hw7prob.jpg" style="width: 300px;">

<pre>1 (
  5 | -1
)
2 (
  1 | 1
  4 | 2
)
3 (
  2 | 2
  6 | -8
)
4 (
  1 | -4
  5 | 3
)
5 (
  2 | 7
)
6 (
  2 | 5
  3 | 10
)
</pre>
<hr>
<p>Note that output is sorted by 1) Src node (increasing order); then 2) Dst node (increasing order); then 3) Edge weight (increasing order)</p>
<p>Note that there is a newline after the last ')'</p>
<p>Note that if a node has no outgoing edges then you should still print it such as:<br>
  <i>Node 7 has no outgoing edges:</i><br>
  </p><pre>7 (
)</pre>
<p></p>

</td>
    <td><pre>std::cout &lt;&lt; a;</pre></td>
    <td>N/A</td>
  </tr>
</tbody></table>

<h3>3.5. Your "Edge" Custom Iterator</h3>

<p>You are required to define an iterator class <b>gdwg::Graph&lt;N, E&gt;::const_iterator</b>.</p>

<p>The iterators will come in a const form. The iterator should respond to the *, ++, --, == and !=
operators</p>

<p>When iterating through your graph the order of iteration should be based on the operator&lt; for the underlying node type N</p>

<p>Your iterators should be appropriately declared as bi-directional. You should implement
and test the complete bi-directional iterator functionality. This includes pre/post incre-
ment and decrement. The post-increment/decrement operations should return a copy of
the value pointed to before the increment/decrement is performed.</p>

<p><b>We will assume that all iterators are invalidated after any modification of the graph</b></p>

<h4>3.5.1. Iterator Operators &amp; Behaviour</h4>

<p>Iterator operators should have the same structure/schema as discussed in week 7 lectures</p>

<p>The <b>value_type</b> within your iterator should be </p><pre>std::tuple&lt;N, N, E&gt;</pre><p></p>

<p>The <b>reference</b> type within your iterator should be </p><pre>std::tuple&lt;const N&amp;, const N&amp;, const E&amp;&gt;</pre>. Note that this means that when returning references, you cannot return a reference to your value type. Instead, you should write <pre>return {node1, node2, edge};</pre>, where node1, node2, and edge are references to the nodes and the edge. Additionally, <b>do not</b> use std::make_tuple, as that will always copy values instead of returning references.<p></p>

<p>In this way, your iterator will iterator through a graph like the one below producing the following tuple values when deferenced each time:</p>

<pre>gdwg::Graph&lt;int, int&gt;</pre>
<img src="./Generic Directed Weighted graph (GDWG)_files/hw7prob.jpg">

<h4>3.5.2. Iterator order</h4>

<p>Note that output is sorted by 1) Src node (increasing order); then 2) Dst node (increasing order); then 3) Edge weight (increasing order)</p>

<pre>(1, 5, -1)
(2, 1, 1)
(2, 4, 2)
(3, 2, 2)
(3, 6, -8)
(4, 1, -4)
(4, 5, 3)
(5, 2, 7)
(6, 2, 5)
(6, 3, 10)
</pre>

<h3>3.6. Internal Representation</h3>

<p>Your Graph is <b>required</b> to own the resources (nodes and edges) that are passed in through the insert functions. This means creating memory on the heap and doing a proper copy of the values from the caller. This is because resources in your graph should outlive the caller's resouce that was passed in in case it goes out of scope. For example, we want the following code to be valid.</p>

<pre>int main() {
  gdwg::Graph&lt;std::string, int&lt; g;
  {
    std::string s1{"Hello"};
    g.InsertNode(s1);
  }

  // Even though s1 has gone out of scope, g has its own
  //  copied resource that it has stored, so the node
  //  will still be in here.
  std::cout &lt;&lt; g.IsNode("Hello") &lt;&lt; "\n"; // prints 'true';
}
</pre>

<p>Your Graph is <b>required</b> to use smart pointers (however you please) to solve this problem.</p>

<p>For each edge, you are only allowed to have one underlying resource (heap) stored in your graph for it.</p>
<p>For each node, you are only allowed to have one underlying resource (heap) stored in your graph for it.</p>

<p>Hint: In your own implementation you're likely to use some STL containers to store things, and somewhere in those containers you'll use instances of either:
</p><ul>
  <li>std::unique_ptr&lt;N&gt;</li>
  <li>std::shared_ptr&lt;N&gt;</li>
</ul>
depending on your implementation choice.<p></p>

<h4>But why smart pointers</h4>

<p>You could feasibly implement the assignment without any smart pointers, through lots of redundant copying. For example, having a massive data structure like:</p>

<pre>std::map&lt;N, std::vector&lt;std::pair&lt;N, E&gt;&gt;&gt;</pre>

<p>You can see that in this structure you would have duplicates of nodes when trying to represent this complex structure. This takes up a lot of space. We want you to build a space efficient graph. This means only storing one instance of each node and edge.</p>

<h3>3.7. Throwing Exceptions</h3>

<p>You are required to throw exceptions in certain cases. These are specified in the tables above.</p>

<h3>3.8. Other notes</h3>
You must:
<ul>
  <li>Include a header guard in graph.h</li>
  <li>Use C++17 style and methods</li>
  <li>Leave a moved-from object in a state with 0 nodes</li>
  <li>Mark all appropriate functions <i>noexcept</i>
</li></ul>

You must not:
<ul>
  <li>Write to any files that aren't provided in the repo (e.g. storing your graph data in an auxilliary file)</li>
</ul>

<h3>3.9. Const Correctness</h3>

<p>You must ensure that each method (2.3) and friend (2.4) appropriately either has:</p>
<ul>
 <li>A const member function; or</li>
 <li>A non-const member function; or</li>
 <li>Both a const and non-const member function</li>
</ul>

<p>Please think carefully about this. The function prototypes intentionally do not specify their constness. This has an explicit const and non-const prototype to help you out.</p>

<p>In most cases you will only need a single function, but in a couple of cases you will need both a const and non-const version.</p>

<h2>4. Getting Started</h2>

<p>If you haven't done so already, clone the repository:</p>

<pre>$ git clone https://github.com/cs6771/comp6771 comp6771</pre>

<p>Then navigate to the <b>assignments/dg</b> directory</p>

<p>All of the files you need are in this directory. Here is a list of files that and a description of their purpose:</p>
<table border="1" cellspacing="0" cellpadding="2">
	<tbody><tr>
		<th>File</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>client.(cpp|out)</td>
		<td>A simple use case of a client using your graph<br><b>Note: Do NOT modify this file. We will potentially update it. If you want to modify it, make a local copy first.</b></td>
	</tr>
	<tr>
		<td>graph.(tpp|h)</td>
		<td>Your GDWG interface and implementation.</td>
	</tr>
	<tr>
		<td>graph_test.cpp</td>
		<td>Your tests for your GDWG file</td>
	</tr>
	<tr>
    <td>BUILD</td>
    <td>Build file containing build, test, dependency instructions</td>
  </tr>
</tbody></table>

<h3>4.2. Reference Solution &amp; Time Limits</h3>

<p>Due to the simple nature of this data type, there will be performance based measurements</p>
<p>Each test will still have a time limit to run (1 second max), but unless you do something completely insane this will be more than enough time for all of your operations to complete.</p>

<h3>4.3. Running your assignment</h3>

<h4>4.3.1. Running a basic use case</h4>

<p>You can run your code against a basic (non-testing) use case to get a better sense of the behaviour</p>

<p>From your project directory:</p>

<pre><code>$ bazel build //assignments/dg:client</code></pre>
<pre><code>$ ./bazel-bin/assignments/dg/client | diff ./assignments/dg/client.sampleout -</code></pre>

<h4>4.3.2. Running your tests</h4>

<pre><code>$ bazel build //assignments/dg:graph_test</code></pre>
<pre><code>$ bazel run //assignments/dg:graph_test</code></pre>

<h3>4.4. Autotests</h3>

<p>You can run some basic tests on your code on any CSE machine. In a folder that contains your files, simply run the following command:</p>

<pre>6771 dgtest</pre>

<p>Note: graph.tpp and graph.h must be in that directory.</p>

<p><b>Note: This test will not be available until the at the earliest the final 7 days before submission</b></p>

<h3>4.5. Assessment</h3>
<p>
This assignment will contribute 20% to your final mark.
</p><p>
The assessment for the assignment recognizes the difficulty of the task, the importance of style, and the importance of appropriate use of programming methods (e.g. using while loops instead of a dozen if statements).

</p><table class="table table-bordered table-striped">
<tbody><tr><td align="right">60%</td><td><b>Correctness</b><br>
    <p>
The correctness of your program will be determined automatically by tests that we will run against your program. We will create a series of test files that contain their own main function and are compiled with your GDWG file(s).</p>

</td></tr><tr><td align="right">20%</td><td><b>Your tests</b><br>
  You are required to write your own tests to ensure your program works.
  You will write tests in <code>graph_test.cpp</code>. At the top of this file you will also include a block comment to explain the rational and approach you took to writing tests. Please read the <a href="https://github.com/catchorg/Catch2/blob/master/docs/tutorial.md">Catch2 tutorial</a> or review lecture/tutorial content to see how to write tests.
  Tests will be marked on several factors. These include, but are not limited to
	<ul>
    <li>Correctness - an incorrect test is worse than useless.</li>
		<li>Coverage - your tests might be great, but if they don't cover the part that ends up failing, they weren't much good to you.</li>
		<li>Brittleness - If you change your implementation, will the tests need to be changed (this generally means avoiding calling functions specific to your implementation where possible - ones that would be private if you were doing OOP).</li>
		<li>Clarity - If your test case failed, it should be immediately obvious what went wrong (this means splitting it up into appropriately sized sub-tests, amongst other things).</li>
	</ul>

</td></tr><tr><td align="right">15%</td><td><b>C++ style</b><br>Your adherence to good C++ style. This is <b>not</b> saying that if you conform to the style guide you will receive full marks for this section. This 20% is also based on how well you use modern C++ methodologies taught in this course as opposed to using backwards-compatible C methods. Examples include: Not using primitive arrays and not using pointers.

</td></tr><tr><td align="right">5%</td><td><b>cpplint and clang-format</b><br>
In your project folder, run the following commands on all C++ files you submit:<br>
<code>$ clang-format -i /path/to/file &amp;&amp; python cpplint.py /path/to/file</code>
<p>If the program outputs the following, you will receive full marks for this section (5%). Otherwise you will receive no marks.</p>
<pre>Done processing assignments/dg/graph.h
Total errors found: 0</pre>

</td></tr></tbody></table>

The following actions will result in a 0/100 mark for gdwg::Graph&lt;N, E&gt;, and in some cases a 0 for COMP6771:
<ul>
<li>Knowingly providing your work to anyone and it is subsequently submitted (by anyone).
</li><li>Submitting any other person's work. This includes joint work.
</li><li>Submitting another person's work without their consent.
</li></ul>

<p>
The lecturer may vary the assessment scheme after inspecting
the assignment submissions but it will remain broadly similar to the description above.


</p><h3>4.6. Originality of Work</h3>
<p>
The work you submit must be your own work.  Submission of work partially or completely derived
from any other person (other than your partner) or jointly written with any other person is not permitted.
The penalties for such an offence may include negative marks,
automatic failure of the course and possibly other academic discipline.
Assignment submissions will be examined both automatically and manually
for such submissions.</p>
<p>
Relevant scholarship authorities will be informed if students holding scholarships
are involved in an incident of plagiarism or other misconduct.</p>
<p>
Do not provide or show your assignment work to any other person — apart from the teaching staff
of COMP6771.
If you knowingly provide or show your assignment work to another person for any
reason, and work derived from it is submitted, you may be penalized, even
if the work was submitted without your knowledge or consent.  This may
apply even if your work is submitted by a third party unknown to you.</p>
<p>
Note you will not be penalized if your work has the potential to be taken without your consent or knowledge.
</p>

<h3>4.7. Group Work</h3>
<p>For this assignment, you can choose to work in a group (of 2) or work by yourself. We STRONGLY recommend you work in a group of 2. Working by yourself is not grounds for special consideration, or compensation of marks. Working in a team will provide you someone you can share and discuss code with and develop your teamwork skills with.</p>

<h4>If working in a group (RECOMMENDED)</h4>

<p>You are <b>required</b> to use a <b>private</b> git repository (e.g. github) to store your assignment code. This repository must be kept after the assignment is due and will be used to resolve any disputes regarding relative contributions between team members.</p>

<p>If you are pair programming (i.e. working off one computer), just write "Pair programming" in the commit message. However, if you pair program and commit with a single username, we will have trouble resolving any disputes.</p>

<p><b>Groups will be finalised on Friday 19th July at 11:59pm</b></p>

<p>
  </p><div style="font-size: 30pt;">You must register your group <a href="https://docs.google.com/forms/d/e/1FAIpQLSe554C1TSfnaeLoZZ2ETgcCrsAB-NdOWlXghFDNCw0YVqPF2g/viewform">here</a> before that deadline</div><br>
  <div style="font-size: 30pt;">You must register your group <a href="https://docs.google.com/forms/d/e/1FAIpQLSe554C1TSfnaeLoZZ2ETgcCrsAB-NdOWlXghFDNCw0YVqPF2g/viewform">here</a> before that deadline</div><br>
  <div style="font-size: 30pt;">You must register your group <a href="https://docs.google.com/forms/d/e/1FAIpQLSe554C1TSfnaeLoZZ2ETgcCrsAB-NdOWlXghFDNCw0YVqPF2g/viewform">here</a> before that deadline</div><br><br>
<p></p>

<h4>If working individually (NOT RECOMMENDED)</h4>

<p>You are strongly recommended, but not required to use a repository to store your code. If you do use a repository to store your code, it <b>must</b> be a <b>private</b> repository</p>

<h3>4.8. Submission</h3>
<p>
This assignment is due <b>Tuesday 6th of August, 23:59:59</b>.
Submit the assignment using this <i>give</i> command:
</p>
<pre>give cs6771 graph graph.h graph.tpp graph_test.cpp
</pre>

<h3>4.9. Late Submission Policy</h3>
<p>
If your assignment is submitted after this date, each hour it is late reduces
the maximum mark it can achieve by 1%.
For example if an assignment worth 76% was submitted
5 hours late, the late submission would have no effect (as maximum mark would be 95%).
If the same assignment was submitted 30 hours late it would be awarded
70%, the maximum mark it can achieve at that time.
</p></div>




</div>


</body></html>